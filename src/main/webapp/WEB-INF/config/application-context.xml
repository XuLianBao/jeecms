<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
	default-lazy-init="true">


	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
				<value>/WEB-INF/config/jeecms/jeecms.properties</value>
				<value>/WEB-INF/config/plug/**/*.properties</value>
			</list>
		</property>
		<qualifier value="main"/>
	</bean>

	<bean id="propertyUtils" class="com.jeecms.common.util.PropertyUtils">
		<property name="properties" ref="properties"/>
	</bean>

	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
		<!--<property name="driverClass" value="${jdbc.driverClassName}" />-->
		<!--<property name="jdbcUrl" value="${jdbc.url}" />-->
		<!--<property name="user" value="${jdbc.username}" />-->
		<!--<property name="password" value="${jdbc.password}" />-->
		<!--<property name="autoCommitOnClose" value="true"/>-->
		<!--<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>-->
		<!--<property name="initialPoolSize" value="${cpool.minPoolSize}"/>-->
		<!--<property name="minPoolSize" value="${cpool.minPoolSize}"/>-->
		<!--<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>-->
		<!--<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>-->
		<!--<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>-->
		<!--<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>-->
	<!--</bean>-->

	<!-- 配置数据源（默认数据源） -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name = "url" value = "${jdbc.url}" />
		<property name = "username" value = "${jdbc.username}" />
		<property name = "password" value = "${jdbc.password}" />
		<property name = "driverClassName" value = "${jdbc.driverClassName}" />

		<!-- DRIUD 配置信息 -->
		<property name = "maxActive" value = "${druid.maxActive}" /> <!-- 最大并发连接数 -->
		<property name = "initialSize" value = "${druid.initialSize}" /> <!-- 初始化连接数量 -->
		<property name = "maxWait" value = "${druid.maxWait}" /> <!-- 配置获取连接等待超时的时间 -->
		<property name = "minIdle" value = "${druid.minIdle}" /> <!-- 最小空闲连接数 -->
		<property name = "timeBetweenEvictionRunsMillis" value ="${druid.timeBetweenEvictionRunsMillis}" /> <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value ="${druid.minEvictableIdleTimeMillis}" /> <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "validationQuery" value = "${druid.${hibernate.db}.validationQuery}" />
		<property name = "testWhileIdle" value = "${druid.testWhileIdle}" />
		<property name = "testOnBorrow" value = "${druid.testOnBorrow}" />
		<property name = "testOnReturn" value = "${druid.testOnReturn}" />
		<property name = "maxOpenPreparedStatements" value ="${druid.maxOpenPreparedStatements}" />
		<property name = "removeAbandoned" value = "${druid.removeAbandoned}" /> <!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandonedTimeout" value ="${druid.removeAbandonedTimeout}" /> <!-- 1800 秒，也就是 30 分钟 -->
		<property name = "logAbandoned" value = "${druid.logAbandoned}" /> <!-- 关闭 abanded 连接时输出错误日志 -->

		<!-- 监控统计拦截的filters -->
		<!-- 并在filters属性中配置了log4j -->
		<property name="filters" value="stat"/>
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=20"/>

		<!-- 配置数据库解密 -->
		<!-- <property name="connectionProperties" value="config.decrypt=true" />   -->
	</bean>

	<!-- 配置spring方法监控的类和方法 START -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
	<!--  
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>jndi</value>  
        </property>  
    </bean>
	 -->

	<!-- Hibernate+EhCache配置二级缓存-->
	<bean id="cacheRegionFactory" class="com.jeecms.common.web.WebSingletonEhCacheRegionFactory"/>

	<!--把hibernate的sessionFactory交给spring来托管-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingLocations" value="#{propertyUtils.getList('hibernate.hbm')}"/>	
		<property name="hibernateProperties">
			<value>
			hibernate.dialect=${hibernate.dialect}
			hibernate.show_sql=true
			hibernate.format_sql=false
			hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
			hibernate.query.substitutions=true 1, false 0
			hibernate.jdbc.fetch_size=20
            hibernate.connection.autocommit=true
            hibernate.connection.release_mode=auto
			hibernate.cache.use_query_cache=true
			hibernate.cache.use_second_level_cache=true
			<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 --> 
			hibernate.cache.use_structured_entries=true
			</value>
		</property>
		<property name="cacheRegionFactory">   
			<ref bean="cacheRegionFactory"/>
		</property>
		<!--实体类操作拦截器-->
		<property name="entityInterceptor">
			<ref bean="treeInterceptor"/>
		</property>

		<property name="packagesToScan" value="com.jeecms.spcp.entity.persistence"/>
	</bean>



	
    <bean id="treeInterceptor" class="com.jeecms.common.hibernate4.TreeIntercptor"/>

	<bean id="defaultTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 注解的作用千万不要作用于全包，否则原有内容依赖混乱，启动会出异常-->
	<context:annotation-config/>
	<!--不对指定包Controller层起作用 -->
	<context:component-scan base-package="com.jeecms.spcp" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 使用注解事务(@Transactional) -->
	<tx:annotation-driven transaction-manager="defaultTransactionManager"/>

	<!-- 申明式事物管理器 start -->
	<!-- REQUIRED(默认)：支持当前事务，如果当前没有事务，就新建一个事务。 -->
	<!-- SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 -->
	<!-- read-only(默认false) -->
	<tx:advice id="defaultTxAdvice" transaction-manager="defaultTransactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" rollback-for="java.lang.Exception" timeout="3000"/>
			<tx:method name="insert*" rollback-for="java.lang.Exception" timeout="3000" />
			<tx:method name="add*" rollback-for="java.lang.Exception" timeout="3000" />
			<tx:method name="update*" rollback-for="java.lang.Exception" timeout="3000"/>
			<tx:method name="delete*" rollback-for="java.lang.Exception" />

			<tx:method name="batchAdd*" rollback-for="java.lang.Exception"/>
			<tx:method name="batchInsert*" rollback-for="java.lang.Exception"/>

			<tx:method name="batchDelete*" rollback-for="java.lang.Exception"/>
			<tx:method name="logicDelete*" rollback-for="java.lang.Exception"/>

			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="validate*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="stats*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="defaultPc" expression="execution(* com.jeecms.spcp.service.*.*(..))" /> <!--把事务控制在Service层-->
		<aop:advisor pointcut-ref="defaultPc" advice-ref="defaultTxAdvice" order="2"/>
	</aop:config>
	<!-- 申明式事物管理器 end -->


</beans>